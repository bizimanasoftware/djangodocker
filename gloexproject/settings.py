"""
Django settings for gloexproject project.

Generated by 'django-admin startproject' using Django 5.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

import os
from pathlib import Path
from decouple import config
import cloudinary
import cloudinary.uploader
import cloudinary.api
# Build paths inside the project like this: BASE_DIR / 'subdir'.
import cloudinary.api
cloudinary.config(
    cloud_name=config('CLOUDINARY_NAME'),
    api_key=config('CLOUDINARY_API_KEY'),
    api_secret=config('CLOUDINARY_API_SECRET')
)


BASE_DIR = Path(__file__).resolve().parent.parent
print("Cloudinary Config:", config('CLOUDINARY_NAME'), config('CLOUDINARY_API_KEY'), config('CLOUDINARY_API_SECRET'))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/
# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
#DEBUG = config('DEBUG', default=False, cast=bool)

# SECURITY WARNING: keep the secret key used in production secret!
#SECRET_KEY = 'django-insecure-cbw0cjc#uh!qoaecbwo7h92&f=oc-u^&!(is*qm3g+arrv5fls'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True
ALLOWED_HOSTS = ['*']



# Application definition

INSTALLED_APPS = [
    'daphne',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sitemaps',
    'channels',
    'widget_tweaks',
# My Apps
    'crispy_forms',
    'crispy_bootstrap5', 
    'homepage',
    'accounts',
    'dashboards',
    'footballers',
    'artists',
    'agents',
    'sponsors',
    'wallet',
    'emergencies',
    'employers',
    'coders',
    'influencers',
    'filmmakers',
    'comedians',
    'volleyballers',
    'volunteers',
    'journalists',
    'traders',
    'boxers',
    'donors',
    'others',
    'messaging', # Ensure this app exists, or rename to 'chat' if you prefer to use your existing one
    'profiles',
    'updates',
     # For django-storages
    'django.contrib.humanize',
    'cloudinary',
    'cloudinary_storage',
    'storages',    
    'chat_with_admin',
    'ckeditor',
    'ckeditor_uploader',
    'emails.apps.EmailsConfig',
]

# Crispy Forms configuration
CRISPY_ALLOWED_TEMPLATE_PACKS = "bootstrap5"
CRISPY_TEMPLATE_PACK = "bootstrap5"

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]
ROOT_URLCONF = 'gloexproject.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'django.template.context_processors.static',
                'django.template.context_processors.media',
                'django.template.context_processors.tz',
                'django.template.context_processors.i18n',
                'django.template.context_processors.csrf',
            ],
        },
    },
]

WSGI_APPLICATION = 'gloexproject.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

# settings.py

# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': os.getenv('POSTGRES_DB'),
        'USER': os.getenv('POSTGRES_USER'),
        'PASSWORD': os.getenv('POSTGRES_PASSWORD'),
        'HOST': os.getenv('POSTGRES_HOST'),
        'PORT': os.getenv('POSTGRES_PORT', '5432'),
    }
}

# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/
STATIC_ROOT = BASE_DIR / 'staticfiles'

STATIC_URL = '/static/'
STATICFILES_DIRS = [BASE_DIR / 'static']
# Media files
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

CLOUDINARY_STORAGE = {
    'CLOUD_NAME': config('CLOUDINARY_NAME'),
    'API_KEY': config('CLOUDINARY_API_KEY'),
    'API_SECRET': config('CLOUDINARY_API_SECRET')
}

DEFAULT_FILE_STORAGE = 'cloudinary_storage.storage.MediaCloudinaryStorage'
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
# NOWPayments API Keys (KEEP THESE SECURE! Use environment variables in production!)
NOWPAYMENTS_API_KEY = 'B8CRP80-HMC4MM2-NT5AMJQ-XG0PNDR' # Get this from your NOWPayments dashboard
NOWPAYMENTS_IPN_SECRET = '9Pkhznz/f6kMHnW1VBiPt4vANaGxKZmd' # Get this from your NOWPayments dashboard
NOWPAYMENTS_BASE_URL = 'https://api.nowpayments.io/v1' # This is crucial
# Example of how to load from environment variables (recommended for production)
# import os
# NOWPAYMENTS_API_KEY = os.environ.get('NOWPAYMENTS_API_KEY', 'YOUR_ACTUAL_NOWPAYMENTS_API_KEY')
# NOWPAYMENTS_IPN_SECRET = os.environ.get('NOWPAYMENTS_IPN_SECRET', 'YOUR_ACTUAL_NOWPAYMENTS_IPN_SECRET')
# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
# --- Custom Settings for Gloex Project ---

# 1. Custom User Model
# This tells Django to use our CustomUser model in the 'accounts' app
# instead of the default User model.
AUTH_USER_MODEL = 'accounts.CustomUser'

# 2. Login and Logout Redirect URLs
# After a successful login, users will be sent to the main dashboard redirect view.
LOGIN_REDIRECT_URL = 'dashboards:redirect'
# After logging out, users will be sent to the homepage.
LOGOUT_REDIRECT_URL = 'homepage:index'
# If a user tries to access a page they don't have permission for,
# they'll be sent to the unified login/register page.
LOGIN_URL = 'accounts:unified_auth'

# =========================================================================
# HTTPS / Proxy Security Settings (Add these here)
# =========================================================================

# If you are serving via HTTPS:
SESSION_COOKIE_SECURE = True
CSRF_COOKIE_SECURE = True

# If you are using a reverse proxy (like Apache or Nginx) handling SSL:
SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
USE_X_FORWARDED_HOST = True

# Ensure ALLOWED_HOSTS includes your domain/IP if DEBUG is False
# ALLOWED_HOSTS = ['your_server_ip', 'your_domain.com', 'www.your_domain.com']

# Additional security measures you might consider for production:
SECURE_SSL_REDIRECT = True # Redirects all HTTP traffic to HTTPS (can also be done in Apache/Nginx)
# SECURE_HSTS_SECONDS = 31536000 # Enable HSTS for 1 year (highly recommended for production HTTPS)
# SECURE_HSTS_INCLUDE_SUBDOMAINS = True
# SECURE_HSTS_PRELOAD = True

# =========================================================================
# END HTTPS / Proxy Security Settings
# =========================================================================

# ... (Any other custom settings you might have) ...
# Channels Settings
ASGI_APPLICATION = 'gloexproject.asgi.application' # Points to your project's asgi.py

CHANNEL_LAYERS = {
    'default': {
        'BACKEND': 'channels_redis.core.RedisChannelLayer',
        'CONFIG': {
            "hosts": [os.environ.get('REDIS_URL', 'redis://localhost:6379/0')],
        },
    },
}

# Django Storages (AWS S3) Settings
# IMPORTANT: Use environment variables for sensitive credentials!
# Example: export AWS_ACCESS_KEY_ID='YOUR_KEY'
#          export AWS_SECRET_ACCESS_KEY='YOUR_SECRET'
#          export AWS_STORAGE_BUCKET_NAME='your-bucket-name'
#          export AWS_S3_REGION_NAME='your-region'

#AWS_ACCESS_KEY_ID = os.environ.get('AWS_ACCESS_KEY_ID')
#AWS_SECRET_ACCESS_KEY = os.environ.get('AWS_SECRET_ACCESS_KEY')
#AWS_STORAGE_BUCKET_NAME = os.environ.get('AWS_STORAGE_BUCKET_NAME')
#AWS_S3_REGION_NAME = os.environ.get('AWS_S3_REGION_NAME') # e.g., 'eu-central-1', 'us-east-1'

#AWS_S3_FILE_OVERWRITE = False # Prevents overwriting files with the same name
#AWS_DEFAULT_ACL = 'public-read' # Makes uploaded files publicly accessible. Change to 'private' if you want signed URLs.
#AWS_QUERYSTRING_AUTH = False # Don't add auth parameters to generated URLs
#AWS_S3_SIGNATURE_VERSION = 's3v4' # Recommended for newer region

# Construct custom domain for public S3 URLs
#AWS_S3_CUSTOM_DOMAIN = f'{AWS_STORAGE_BUCKET_NAME}.s3.{AWS_S3_REGION_NAME}.amazonaws.com'
#MEDIA_URL = f"https://{AWS_S3_CUSTOM_DOMAIN}/media/" # Base URL for your media files
#DEFAULT_FILE_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'

# If you also want to serve static files from S3 (optional, but good for production)
#STATIC_URL = f"https://{AWS_S3_CUSTOM_DOMAIN}/static/"
#STATICFILES_STORAGE = 'storages.backends.s3boto3.S3StaticStorage'
# gloexproject/settings.py
# ...
CELERY_BROKER_URL = os.environ.get('REDIS_URL', 'redis://localhost:6379/0')
CELERY_RESULT_BACKEND = os.environ.get('REDIS_URL', 'redis://localhost:6379/0')
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIMEZONE = 'Europe/Amsterdam' # Or your appropriate timezone

# This tells CKEditor where to upload images from the editor itself
CKEDITOR_UPLOAD_PATH = "uploads/"

# Configuration for the CKEditor toolbar
CKEDITOR_CONFIGS = {
    'default': {
        'toolbar': 'full',
        'height': 400,
        'width': '100%',
        'extraPlugins': ','.join([
            'uploadimage', # allows image uploads
            'div',
            'autolink',
            'autoembed',
            'embedsemantic',
            'autogrow',
            'widget',
            'lineutils',
            'clipboard',
            'dialog',
            'dialogui',
            'elementspath'
        ]),
    },
}

# Email Configuration for SMTP2GO
# SMTP2GO recommends using port 2525, 80, 587, or 465. We'll use 587 with TLS.
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'mail.smtp2go.com'
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_HOST_USER = config('SMTP2GO_API_KEY') # Your API Key is the username
EMAIL_HOST_PASSWORD = config('SMTP2GO_API_KEY') # And also the password
DEFAULT_FROM_EMAIL = config('EMAIL_SENDER', 'Default Name <noreply@gloex.org>')
